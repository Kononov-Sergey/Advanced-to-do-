{"version":3,"file":"static/js/357.f1a8c433.chunk.js","mappings":"4MACA,EAAuB,mB,SCKvB,EAJkD,SAACA,GACjD,OAAO,gBAAKC,UAAWC,EAAhB,SAA+BF,EAAMG,UAC7C,E,SCHD,EAAuB,uBAAvB,EAAwD,0BAAxD,EAA4F,0BAA5F,EAAgI,0BCyDhI,EA/CK,SAACH,GAEJ,IAAMI,GAAgBC,EAAAA,EAAAA,QAAgC,MAChDC,GAAeD,EAAAA,EAAAA,QAAmC,MAexD,OACE,SAAC,EAAD,WACE,kBAAMJ,UAAWC,EAAcK,SAfnC,SAA2BC,GAA0C,IAAD,IAClEA,EAAMC,iBAEN,IAAMC,GAAe,UAAAN,EAAcO,eAAd,eAAuBC,QAAS,GAC/CC,GAAc,UAAAP,EAAaK,eAAb,eAAsBC,QAAS,GAEnDZ,EAAMc,UAAU,CACdC,MAAOL,EACPM,KAAMH,EACNI,OAAQC,EAAAA,EAAAA,SAEX,EAIG,UACGlB,EAAMmB,YACL,gBAAKlB,UAAWC,EAAhB,UACE,SAACkB,EAAA,EAAD,OAGJ,iBAAKnB,UAAWC,EAAhB,WAEE,kBAAOmB,QAAQ,QAAf,oBACA,kBAAOC,UAAQ,EAACC,KAAK,OAAOC,GAAG,QAAQC,IAAKrB,QAE9C,iBAAKH,UAAWC,EAAhB,WACE,kBAAOmB,QAAQ,OAAf,mBACA,qBAAUC,UAAQ,EAACE,GAAG,OAAOE,KAAM,EAAGD,IAAKnB,QAE7C,gBAAKL,UAAWC,EAAhB,UAGE,mBAAQqB,KAAK,SAAStB,UAAU,MAAhC,4BAOT,E,iBCrBD,EAnBgB,WACd,OAAgC0B,EAAAA,EAAAA,GAAQC,EAAAA,IAAhCC,EAAR,EAAQA,YAAaZ,EAArB,EAAqBA,OACfa,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACO,cAAXf,GACFa,EAAS,yBAA0B,CAAEG,SAAS,GAEjD,GAAE,CAAChB,EAAQa,IAMZ,OACE,SAAC,EAAD,CAAUX,UAAsB,YAAXF,EAAsBH,UALtB,SAACoB,GACtBL,EAAYK,EACb,GAKF,C","sources":["webpack://react-complete-guide/./src/components/UI/Card.module.css?26d0","components/UI/Card.tsx","webpack://react-complete-guide/./src/components/Todos/TodoForm.module.css?8e7a","components/Todos/TodoForm.tsx","pages/NewTodo.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"card\":\"Card_card__uhzE6\"};","import classes from \"./Card.module.css\";\n\nconst Card: React.FC<{ children: JSX.Element }> = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"TodoForm_form__P7+k5\",\"loading\":\"TodoForm_loading__KFaFk\",\"control\":\"TodoForm_control__iJ4E0\",\"actions\":\"TodoForm_actions__532H1\"};","import React, { useRef } from \"react\";\nimport { onAddEventTodoInfoType } from \"../../pages/NewTodo\";\nimport { TodoStatusEnum } from \"../../utils/changeTodoStatus\";\n\nimport Card from \"../UI/Card\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport classes from \"./TodoForm.module.css\";\n\nconst TodoForm: React.FC<{\n  onAddTodo: (todo: onAddEventTodoInfoType) => void;\n  isLoading: boolean;\n}> = (props) => {\n  // useRef can contain any type of a html element to interact with him later\n  const topicInputRef = useRef<HTMLInputElement | null>(null);\n  const textInputRef = useRef<HTMLTextAreaElement | null>(null);\n\n  function submitFormHandler(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n\n    const enteredTopic = topicInputRef.current?.value || \"\";\n    const enteredText = textInputRef.current?.value || \"\";\n\n    props.onAddTodo({\n      topic: enteredTopic,\n      text: enteredText,\n      status: TodoStatusEnum.pending,\n    });\n  }\n\n  return (\n    <Card>\n      <form className={classes.form} onSubmit={submitFormHandler}>\n        {props.isLoading && (\n          <div className={classes.loading}>\n            <LoadingSpinner />\n          </div>\n        )}\n        <div className={classes.control}>\n          {/* you can 'attached' labels to their inputs using htmlFor attr or just wrap the input inside of a label */}\n          <label htmlFor=\"topic\">Topic</label>\n          <input required type=\"text\" id=\"topic\" ref={topicInputRef} />\n        </div>\n        <div className={classes.control}>\n          <label htmlFor=\"text\">Text</label>\n          <textarea required id=\"text\" rows={5} ref={textInputRef}></textarea>\n        </div>\n        <div className={classes.actions}>\n          {/* also good practice to gives each btn within a form their type, \n          that helps for the accessibility and clear understanding of what this btn is responsible of */}\n          <button type=\"submit\" className=\"btn\">\n            Add Todo\n          </button>\n        </div>\n      </form>\n    </Card>\n  );\n};\n\nexport default TodoForm;\n","import { useNavigate } from \"react-router-dom\";\r\nimport { useEffect } from \"react\";\r\n\r\nimport TodoForm from \"../components/Todos/TodoForm\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { addTodo, TodoInteface } from \"../lib/api\";\r\nimport { TodoStatusEnum } from \"../utils/changeTodoStatus\";\r\n\r\n// The NewTodo page is a superstructure of the TodoForm. It also renders a loding spinner and displays errors\r\n\r\nexport type onAddEventTodoInfoType = {\r\n  topic: string;\r\n  text: string;\r\n  status: TodoStatusEnum;\r\n};\r\n\r\nconst NewTodo = () => {\r\n  const { sendRequest, status } = useHttp(addTodo);\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    if (status === \"completed\") {\r\n      navigate(\"/Advanced-to-do-/Todos\", { replace: true });\r\n    }\r\n  }, [status, navigate]);\r\n\r\n  const addTodoHandler = (data: onAddEventTodoInfoType) => {\r\n    sendRequest(data);\r\n  };\r\n\r\n  return (\r\n    <TodoForm isLoading={status === \"pending\"} onAddTodo={addTodoHandler} />\r\n  );\r\n};\r\n\r\nexport default NewTodo;\r\n"],"names":["props","className","classes","children","topicInputRef","useRef","textInputRef","onSubmit","event","preventDefault","enteredTopic","current","value","enteredText","onAddTodo","topic","text","status","TodoStatusEnum","isLoading","LoadingSpinner","htmlFor","required","type","id","ref","rows","useHttp","addTodo","sendRequest","navigate","useNavigate","useEffect","replace","data"],"sourceRoot":""}