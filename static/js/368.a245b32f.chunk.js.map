{"version":3,"file":"static/js/368.a245b32f.chunk.js","mappings":"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","sources":["webpack://react-complete-guide/./src/components/Todos/HighlightedTodo.module.css?bc82","components/Todos/HighlightedTodo.tsx","webpack://react-complete-guide/./src/components/Subtasks/NewSubtaskForm.module.css?2a56","components/Subtasks/NewSubtaskForm.tsx","webpack://react-complete-guide/./src/components/Subtasks/SubTaskItem.module.css?dbf7","components/Subtasks/SubTaskItem.tsx","webpack://react-complete-guide/./src/components/Subtasks/SubtasksList.module.css?ac0a","components/Subtasks/SubtasksList.tsx","webpack://react-complete-guide/./src/components/Subtasks/Subtasks.module.css?7ed6","components/Subtasks/Subtasks.tsx","pages/TodoDetail.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"Todo\":\"HighlightedTodo_Todo__6mzJN\",\"change-btn\":\"HighlightedTodo_change-btn__oKKmY\"};","import React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport useHttp from \"../../hooks/use-http\";\nimport { TodoInteface, updateTodo } from \"../../lib/api\";\nimport { TodoStatusEnum } from \"../../utils/changeTodoStatus\";\nimport classes from \"./HighlightedTodo.module.css\";\n\nconst HighlightedTodo: React.FC<{\n  text: string;\n  topic: string;\n  todoId: string;\n  status: TodoStatusEnum;\n}> = (props) => {\n  const [isDataChanged, setIsDataChanged] = useState(false);\n  const [topicInput, setTopicInput] = useState(props.topic);\n  const [textInput, setTextInput] = useState(props.text);\n\n  const { sendRequest, status } = useHttp(updateTodo);\n\n  const navigate = useNavigate();\n\n  const submitUpdatedTodoInput = (event: React.FormEvent<HTMLFormElement>) => {\n    // i called \"event.preventDefault();\"\" cause we don't want to refresh the whole page during the submit form event,\n    // instead we call this func, and do what we wanna do\n    // even though we want to navigate to another page, we should use diff tools for that (in our case useNavigate)\n    // because React bases on concept called SPA (single page application), and we MUST not allow our app reload the page entirely\n    event.preventDefault();\n    const UpdatedTodo: TodoInteface = {\n      id: props.todoId,\n      topic: topicInput,\n      text: textInput,\n      status: props.status,\n    };\n    sendRequest(UpdatedTodo);\n  };\n\n  useEffect(() => {\n    if (status === \"completed\") {\n      navigate(\"/Advanced-to-do-/Todos\", { replace: true });\n    }\n  }, [status, navigate]);\n\n  useEffect(() => {\n    if (props.topic !== topicInput || props.text !== textInput) {\n      setIsDataChanged(true);\n    } else {\n      setIsDataChanged(false);\n    }\n  }, [topicInput, textInput]);\n\n  return (\n    <form onSubmit={submitUpdatedTodoInput} className={classes.Todo}>\n      <label>Topic:</label>\n      <input\n        onInput={(event) => {\n          setTopicInput(event.currentTarget.value);\n        }}\n        defaultValue={topicInput}\n      ></input>\n      <label>Text:</label>\n      <textarea\n        onInput={(event) => {\n          setTextInput(event.currentTarget.value);\n        }}\n        defaultValue={textInput}\n        rows={2}\n      ></textarea>\n      {isDataChanged && (\n        <button type=\"submit\" className={classes[\"change-btn\"]}>\n          Change\n        </button>\n      )}\n    </form>\n  );\n};\n\nexport default HighlightedTodo;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"NewSubtaskForm_form__0zTKk\",\"loading\":\"NewSubtaskForm_loading__ZpUr4\",\"control\":\"NewSubtaskForm_control__SmXtN\",\"actions\":\"NewSubtaskForm_actions__6rTuv\"};","import { useRef } from \"react\";\nimport useHttp from \"../../hooks/use-http\";\nimport { addSubtask, addSubtaskArgumentType } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\n\nimport classes from \"./NewSubtaskForm.module.css\";\n\nconst NewSubtaskForm: React.FC<{\n  todoID: string | undefined;\n  showTextArea: (arg: boolean) => void;\n}> = (props) => {\n  const { sendRequest, status } = useHttp(addSubtask);\n  const SubtaskTextRef = useRef<HTMLTextAreaElement | null>(null);\n\n  const submitFormHandler = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    if (SubtaskTextRef.current?.value !== \"\" && props.todoID) {\n      const newSubtaskInfo: addSubtaskArgumentType = {\n        subtaskData: { text: SubtaskTextRef.current!.value },\n        todoId: props.todoID,\n      };\n      await sendRequest(newSubtaskInfo);\n      props.showTextArea(false);\n    }\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === \"pending\" && (\n        <div className=\"centered\">\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control}>\n        <label htmlFor=\"Subtask\">Your Subtask</label>\n        <textarea id=\"Subtask\" rows={5} ref={SubtaskTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Subtask</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewSubtaskForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"SubTaskItem_item__9P4No\"};","import classes from \"./SubTaskItem.module.css\";\n\nconst SubTaskItem: React.FC<{ text: string }> = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default SubTaskItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"Subtasks\":\"SubtasksList_Subtasks__L4any\"};","import SubTaskItem from \"./SubTaskItem\";\nimport { SubtaskType } from \"./Subtasks\";\nimport classes from \"./SubtasksList.module.css\";\n\nconst SubtasksList: React.FC<{ Subtasks: SubtaskType[] }> = (props) => {\n  return (\n    <ul className={classes.Subtasks}>\n      {/* when we want render a bunch of element and display them on the screen of our app you can you arrays and func map, \n      that generally just returns a copy of initial array, and if we fill this new array in with JSX elems React will be render this whole array on the screen */}\n      {props.Subtasks.map((Subtask) => (\n        <SubTaskItem key={Subtask.id} text={Subtask.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default SubtasksList;\n","// extracted by mini-css-extract-plugin\nexport default {\"Subtasks\":\"Subtasks_Subtasks__vSwCd\"};","import React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport useHttp from \"../../hooks/use-http\";\n\nimport { getAllSubtasks } from \"../../lib/api\";\n\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport NewSubtaskForm from \"./NewSubtaskForm\";\nimport SubtasksList from \"./SubtasksList\";\nimport classes from \"./Subtasks.module.css\";\n\nexport type SubtaskType = {\n  id: string;\n  text: string;\n};\n\nconst Subtasks = () => {\n  const params = useParams();\n  const { sendRequest, status, data, error } = useHttp(getAllSubtasks, true);\n  const [isAddingSubtask, setIsAddingSubtask] = useState(false);\n\n  const allSubtasks: SubtaskType[] = data;\n\n  const { TodoID } = params;\n\n  // not common way to work in React, but it's quite convenient to read and adjust\n  let subtasks: JSX.Element | null = null;\n\n  useEffect(() => {\n    sendRequest(TodoID);\n  }, [sendRequest, TodoID, isAddingSubtask]);\n\n  const startAddSubtaskHandler = () => {\n    setIsAddingSubtask(true);\n  };\n\n  if (status === \"pending\") {\n    subtasks = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (status === \"completed\" && allSubtasks && allSubtasks.length > 0) {\n    subtasks = <SubtasksList Subtasks={allSubtasks} />;\n  }\n\n  if (status === \"completed\" && (!allSubtasks || allSubtasks.length === 0)) {\n    subtasks = <p className=\"centered\">No subtasks were added yet!</p>;\n  }\n\n  if (error) {\n    subtasks = <p className=\"centered\">{error}</p>;\n  }\n\n  return (\n    <section className={classes.Subtasks}>\n      <h2>Subtasks</h2>\n      {subtasks}\n      {!isAddingSubtask && (\n        <button className=\"btn\" onClick={startAddSubtaskHandler}>\n          Add a subtask\n        </button>\n      )}\n      {isAddingSubtask && (\n        <NewSubtaskForm\n          showTextArea={setIsAddingSubtask}\n          todoID={params.TodoID}\n        />\n      )}\n    </section>\n  );\n};\n\nexport default Subtasks;\n","import { useParams } from \"react-router-dom\";\r\nimport { useEffect } from \"react\";\r\n\r\nimport HighlightedTodo from \"../components/Todos/HighlightedTodo\";\r\nimport Subtasks from \"../components/Subtasks/Subtasks\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\n\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { getSingleTodo } from \"../lib/api\";\r\n\r\n// TodoDetail consits indvidual subtasks and info about current todo. Fetched todo id from the url params via useParams\r\n\r\nconst TodoDetail = () => {\r\n  const params = useParams();\r\n  const {\r\n    sendRequest,\r\n    status,\r\n    data: Todo,\r\n    error,\r\n  } = useHttp(getSingleTodo, true);\r\n\r\n  useEffect(() => {\r\n    sendRequest(params.TodoID);\r\n  }, [sendRequest, params.TodoID]);\r\n\r\n  if (status === \"pending\") {\r\n    return (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"centered\">\r\n        <h1>{error}</h1>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!Todo.text) {\r\n    return (\r\n      <div className=\"centered\">\r\n        <h1>Not Todo found!</h1>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <HighlightedTodo\r\n        text={Todo.text}\r\n        topic={Todo.topic}\r\n        todoId={params.TodoID || \"\"}\r\n        status={Todo.status}\r\n      />\r\n      <Subtasks />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TodoDetail;\r\n"],"names":["props","useState","isDataChanged","setIsDataChanged","topic","topicInput","setTopicInput","text","textInput","setTextInput","useHttp","updateTodo","sendRequest","status","navigate","useNavigate","useEffect","replace","onSubmit","event","preventDefault","UpdatedTodo","id","todoId","className","classes","onInput","currentTarget","value","defaultValue","rows","type","addSubtask","SubtaskTextRef","useRef","submitFormHandler","current","todoID","newSubtaskInfo","subtaskData","showTextArea","LoadingSpinner","htmlFor","ref","Subtasks","map","Subtask","params","useParams","getAllSubtasks","data","error","isAddingSubtask","setIsAddingSubtask","allSubtasks","TodoID","subtasks","length","onClick","getSingleTodo","Todo"],"sourceRoot":""}